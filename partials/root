export PROJECT_PATH=$(shell pwd -P)/

#############################
# Init makefile global vars #
#############################

ifndef MAKEFILE_PATH
	MAKEFILE_PATH=$(shell echo $(PROJECT_PATH)docker/.makefiles)
endif

MAKEFILE_BASE_URL_EDITED=1
ifndef MAKEFILE_BASE_URL
	MAKEFILE_BASE_URL=https://github.com/Smeagolworms4/auto-makefile/raw/master/partials
	MAKEFILE_BASE_URL_EDITED=0
endif
export MAKEFILE_PATH
export MAKEFILE_BASE_URL

$(shell [ ! -f "$(MAKEFILE_PATH)/dl.sh" ] && curl -L --silent -f "$(MAKEFILE_BASE_URL)/dl.sh" -o "$(MAKEFILE_PATH)/dl.sh" && chmod +x "$(MAKEFILE_PATH)/dl.sh")

ifndef DOCKER_NAME

####################
# Init new project #
####################

#Execute always this command 	
.DEFAULT_GOAL=init

init:
%:
	@"$(MAKEFILE_PATH)/dl.sh" "$(MAKEFILE_BASE_URL)" "$(MAKEFILE_PATH)" init.sh; chmod +x "$(MAKEFILE_PATH)/init.sh"
	@bash "$(MAKEFILE_PATH)/init.sh" "$(MAKEFILE_BASE_URL)" "$(MAKEFILE_BASE_URL_EDITED)"
	@$(MAKE)
else
	
ifndef MAKEFILES
$(error "Variable MAKEFILES not defined (can be export MAKEFILES=nginx|php)")
endif
ifndef BASE_URL
$(error "Variable BASE_URL not defined (can be  export BASE_URL=dev.projectdomaine.com)")
endif

###########################
# Init docker global vars #
###########################

export CONTAINER_PATH=$(PROJECT_PATH)docker/

export USER_ID=$(shell id -u)
export USER_GID=$(shell id -g)
export HOST_IP=$(shell ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $$2 }' | cut -f2 -d: | head -n1)

CONSOLE_ARGS=$(wordlist 2, 1000, $(MAKECMDGOALS))
ifndef ENV
	ENV:=dev
endif
ifeq ($(ENV), dev)
	COMPOSE_PATH:=$(CONTAINER_PATH)docker-compose.yml
	BASE_URL:=dev.$(BASE_URL)
else
	COMPOSE_PATH:=$(CONTAINER_PATH)docker-compose.$(ENV).yml
endif

# Download external makefiles #

include $(shell for file in `echo $(MAKEFILES)`; do "$(MAKEFILE_PATH)/dl.sh" "$(MAKEFILE_BASE_URL)" "$(MAKEFILE_PATH)" $$file; done)

# Overidable Variables #

export ENV     ## Docker compose environment (default: dev) must be (dev, prod, prod-launcher, build)

# Start Rules #

.DEFAULT_GOAL:=help

####################
# Inject makefiles #
####################

include $(shell for file in `echo $(MAKEFILES)`; do echo $(MAKEFILE_PATH)/$$file; done)

###################
# Declare var cmd #
###################

export RULE_DEP_BUILD=
export RULE_CMD_BUILD=docker-compose -f $(COMPOSE_PATH) -p $(DOCKER_NAME) build --force-rm

export RULE_DEP_UP=
export RULE_CMD_UP=\
@echo "\033[0;33m";\
echo "================";\
echo "= Docker start =";\
echo "================";\
echo "\033[0m"

export RULE_DEP_LIST=
export RULE_CMD_LIST=docker ps -a

export RULE_DEP_KILLALL=
export RULE_CMD_KILLALL=\
IDS=`docker ps -a -q`; if [ "$$IDS" != "" ]; then docker rm -f $$IDS; fi;\
docker network prune --force;\
docker volume prune --force\

export RULE_DEP_CLEANNONE=
export RULE_CMD_CLEANNONE=docker rmi `docker images | grep "^<none>" | awk "{print $3}"`


####################
# Build containers #
####################

## Build all containers
build: $(RULE_DEP_BUILD)
	$(RULE_CMD_BUILD)

#################
# Up containers #
#################

## Up all containers
up: $(RULE_DEP_UP)
	$(RULE_CMD_UP)
	
##########
# Others #
##########

## List all containers
list: $(RULE_DEP_LIST)
	$(RULE_CMD_LIST)

## Kill all containers for all projects
killall: $(RULE_DEP_KILLALL)
	$(RULE_CMD_KILLALL)

## Remove unammed image
clean-none: $(RULE_DEP_CLEANNONE)
	$(RULE_CMD_CLEANNONE)

## Update all Makefiles script
update-makefile:
	@rm -rfv "$(MAKEFILE_PATH)"
	@echo cool
	@$(MAKE)

## Help instructions
help:
	@echo "\033[0;33mUsage:\033[0m"
	@echo "     make [var_name=value ...] [target]\n"
	@echo "\033[0;33mAvailable variables:\033[0m"
	@echo ""
	@awk '/^export (.*)+## (.*)/ { \
		helpVar = $$2; \
		helpMessage = substr($$0, index($$0, $$3) + 3); \
		printf "     \033[0;32m%-22s\033[0m %s\n", helpVar, helpMessage; \
	} \
	{ n5line = n4line; n4line = n3line; n3line = n2line; n2line = lastLine; lastLine = $$0;}' $(MAKEFILE_LIST)
	@echo ""
	@echo "\033[0;33mAvailable targets:\033[0m"
	@echo ""
	@echo "\
		#!/bin/bash\\n\
		declare -A \RULE_GROUPS\\n\
		declare -A \RULE_GROUPS_TITLES\\n\
		\\n\
		$$(awk '/^[a-zA-Z\-\_0-9\.@]+:/ {\
			returnMessage = match(n4line, /^# (.*)/); \
				if (returnMessage) { \
					\
					key = n4line; \
					gsub(/[^a-zA-Z0-9]/, "_", key);\
					printf "%s", title;\
					\
					printf "RULE_GROUPS_TITLES[%s]=\"", key;\
					printf "     %s\\n", n5line; \
					printf "     %s\\n", n4line; \
					printf "     %s", n3line; \
					printf "\";\n"; \
				} \
				helpMessage = match(lastLine, /^## (.*)/); \
				if (helpMessage) { \
					gsub(/"/, "\\\"", helpMessage);\
					helpCommand = substr($$1, 0, index($$1, ":")); \
					helpMessage = substr(lastLine, RSTART + 3, RLENGTH); \
					printf "RULE_GROUPS[%s]=\"$${RULE_GROUPS[%s]}     \033[0;32m%-22s\033[0m %s\\n\"\n", key, key, helpCommand, helpMessage; \
				} \
			} \
			{ n5line = n4line; n4line = n3line; n3line = n2line; n2line = lastLine; lastLine = $$0;}' $(MAKEFILE_LIST)\
			| sed  -e "s/\`/\\\\\`/g")\
		\n\
		for key in \`echo -e "\$${!RULE_GROUPS_TITLES[@]}"|sed -e \"s/ /\\\\n/g\"|sort\`; do\n\
			echo -e \"\$${RULE_GROUPS_TITLES[\$${key}]}\"\n\
			echo -e \"\$${RULE_GROUPS[\$${key}]}\"|sort\n\
			echo -e \"\"\n\
		done\
	" | bash
	
	
endif